<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (window_get_fullscreen())
{
    view_hport = display_get_height();
    view_wport = display_get_width();
    view_hview = view_hport;
    view_wview = view_wport;
}*/

list_solid = ds_list_create();    
list_move = ds_list_create();    
list_all = ds_list_create();
list_tile = ds_list_create();
floor_grid = ds_grid_create(TMAPSIZE, TMAPSIZE);
ds_grid_set_region(floor_grid, 0, 0, TMAPSIZE, TMAPSIZE, noone);

map_load(string(room_x) + "x" + string(room_y));

gg = instance_create(0, 0, obj_gg);
gg.gx = 5;
gg.gy = 6;
gg.gz = 6;
ds_list_add(list_move, gg);

/*table = instance_create(0, 0, obj_table);
table.gx = 6;
table.gy = 6;
table.gz = 6;
ds_list_add(list_move, table);
table = instance_create(0, 0, obj_table);
table.gx = 7;
table.gy = 8;
table.gz = 6;
ds_list_add(list_move, table);

path_sqr = instance_create(0, 0, obj_sqr_yel);
path_sqr.gx = 4;
path_sqr.gy = 1;
path_sqr.gz = 4;
path_sqr.gspeed = 0.1;
with (path_sqr)
{
    ds_list_add(path, point_3d_create(gx, gy, gz),
    point_3d_create(gx + 2, gy, gz), point_3d_create(gx + 2, gy + 2, gz),
    point_3d_create(gx, gy + 2, gz));
    cycled = 1;
    pusher = 1;
}
ds_list_add(list_move, path_sqr);

path_sqr = instance_create(0, 0, obj_lift);
path_sqr.gx = 3;
path_sqr.gy = 7;
path_sqr.gz = 1;
path_sqr.gspeed = 0.1;
path_sqr.pusher = 1;
path_sqr.cycled = 1;
ds_list_add(list_move, path_sqr);

ghost = instance_create(0, 0, obj_ghost);
ghost.gx = 6;
ghost.gy = 2;
ghost.gz = 0;
ghost.cycled = 1;
cube_path_width(ghost, 8);
ds_list_add(list_move, ghost);

forcer = instance_create(0, 0, obj_forcer_up);
forcer.gx = 1;
forcer.gy = 9;
forcer.gz = 0;
ds_list_add(list_solid, forcer);
forcer = instance_create(0, 0, obj_forcer_up);
forcer.gx = 1;
forcer.gy = 8;
forcer.gz = 0;
ds_list_add(list_solid, forcer);

sphere = instance_create(0, 0, obj_sphere);
sphere.gx = 3;
sphere.gy = 8;
sphere.gz = 0;
ds_list_add(list_solid, sphere);

apple = instance_create(0, 0, obj_apple);
apple.gx = 3;
apple.gy = 9;
apple.gz = 0;
ds_list_add(list_solid, apple);*/

/*bottle = instance_create(0, 0, obj_green_bottle);
bottle.gx = 5;
bottle.gy = 12;
bottle.gz = 0;
ds_list_add(list_solid, bottle);
bottle = instance_create(0, 0, obj_blue_bottle);
bottle.gx = 5;
bottle.gy = 13;
bottle.gz = 0;
ds_list_add(list_solid, bottle);*/

ANGO = 45;

show_x = 500;
show_y = 350;
d3_x = show_x;
d3_y = show_y;

debug_on = 0;

shadow_alpha = 0.7;
shadow_surf = surface_create(TCELLSIZETOX * TMAPSIZE * 2, TCELLSIZETOZ * TMAPSIZE);
shadow_surf_mask = surface_create(TCELLSIZETOX * TMAPSIZE * 2, TCELLSIZETOZ * TMAPSIZE);
surface_set_target(shadow_surf_mask);
draw_set_colour(c_black);
draw_rectangle(0, 0, surface_get_width(shadow_surf_mask), surface_get_height(shadow_surf_mask), 0);
draw_set_blend_mode(bm_subtract);
for(var i = 0; i &lt; TMAPSIZE; i++)
{
    for (var j = 0; j &lt; TMAPSIZE; j++)
    {
        if(floor_grid[# i, j] != noone)
        {
            draw_primitive_begin(pr_trianglefan);
            draw_vertex((i - j) * TCELLSIZETOX + TCELLSIZETOX * TMAPSIZE, (i + j) * TCELLSIZETOZ / 2);
            draw_vertex((i - j - 1) * TCELLSIZETOX + TCELLSIZETOX * TMAPSIZE, (i + j - 1) * TCELLSIZETOZ / 2);
            draw_vertex((i - j) * TCELLSIZETOX + TCELLSIZETOX * TMAPSIZE, (i + j - 2) * TCELLSIZETOZ / 2);
            draw_vertex((i - j + 1) * TCELLSIZETOX + TCELLSIZETOX * TMAPSIZE, (i + j - 1) * TCELLSIZETOZ / 2);
            draw_primitive_end();
        }
    }
}
draw_set_blend_mode(bm_normal);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(list_solid);
ds_list_destroy(list_move);
ds_list_destroy(list_all);
ds_list_destroy(list_tile);
surface_free(shadow_surf);
surface_free(shadow_surf_mask);
ds_grid_destroy(floor_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_gg))
{
    d3_x = show_x - round((obj_gg.gx - obj_gg.gy) * TCELLSIZETOX);
    d3_y = show_y - round((obj_gg.gx + obj_gg.gy) * TCELLSIZETOZ / 2);
}

for (var i = 0; i &lt; ds_list_size(list_all); i++)
{
    surface_clear(list_all[| i].area_surf);
}
for (var i = 0; i &lt; ds_list_size(list_all) - 1; i++)
{
    for (var j = i + 1; j &lt; ds_list_size(list_all); j++)
    {
        var A = list_all[| i];
        var B = list_all[| j];
        if (abs(A.gx - B.gx) &lt;= (max(A.shadow_rbx, B.shadow_rbx) / TCELLSIZETOX)) &amp;&amp;
        (abs(A.gy - B.gy) &lt;= (max(A.shadow_rby, B.shadow_rby) * 2 / TCELLSIZETOZ))
        {
            if (A.gz + A.height &lt;= B.gz) &amp;&amp; (surface_exists(B.shadow_surf)) &amp;&amp; (surface_exists(A.area_surf))
            {
                surface_set_target(A.area_surf);
                draw_surface(B.shadow_surf,
                round(A.shadow_xoffset - (A.gx - A.gy) * TCELLSIZETOX 
                - (A.length - A.width) * TCELLSIZETOX -
                B.shadow_xoffset + (B.gx - B.gy) * TCELLSIZETOX 
                + (B.length - B.width) * TCELLSIZETOX),
                round(A.shadow_yoffset - (A.gx + A.gy) * TCELLSIZETOZ / 2 
                - (A.width + A.length - 2) * TCELLSIZETOZ / 2 - 
                B.shadow_yoffset + (B.gx + B.gy) * TCELLSIZETOZ / 2 
                + (B.width + B.length - 2) * TCELLSIZETOZ / 2));
                surface_reset_target();
            }
            if (B.gz + B.height &lt;= A.gz) &amp;&amp; (surface_exists(B.area_surf)) &amp;&amp; (surface_exists(A.shadow_surf))
            {
                surface_set_target(B.area_surf);
                draw_surface(A.shadow_surf,
                round(B.shadow_xoffset - (B.gx - B.gy) * TCELLSIZETOX 
                - (B.length - B.width) * TCELLSIZETOX -
                A.shadow_xoffset + (A.gx - A.gy) * TCELLSIZETOX 
                + (A.length - A.width) * TCELLSIZETOX),
                round(B.shadow_yoffset - (B.gx + B.gy) * TCELLSIZETOZ / 2 
                - (B.width + B.length - 2) * TCELLSIZETOZ / 2 - 
                A.shadow_yoffset + (A.gx + A.gy) * TCELLSIZETOZ / 2 
                + (A.width + A.length - 2) * TCELLSIZETOZ / 2));
                surface_reset_target();
            }
        }
    }
    with (list_all[| i])
    {
        if (surface_exists(area_surf) &amp;&amp; surface_exists(area_surf_mask))
        {
            surface_set_target(area_surf);
            draw_set_blend_mode(bm_subtract);
            draw_surface(area_surf_mask, 0, 0);
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
        }
    }
    
}

ds_list_d3_surfaces(list_all);

if (surface_exists(shadow_surf))
{
    surface_clear(shadow_surf);
    surface_set_target(shadow_surf);
    for (var i = 0; i &lt; ds_list_size(list_all); i++)
    {
        var obj = list_all[| i];
        with (obj)
        {
            if ((visible) &amp;&amp; (surface_exists(shadow_surf)))
            {
                draw_surface(shadow_surf, (gx - gy) * TCELLSIZETOX + (length - width) * TCELLSIZETOX + TCELLSIZETOX * TMAPSIZE - shadow_xoffset,
                (gx + gy) * TCELLSIZETOZ / 2 + (width + length - 2) * TCELLSIZETOZ / 2 - shadow_yoffset);
            }
        }
    }
    draw_set_blend_mode(bm_subtract);
    draw_surface(shadow_surf_mask, 0, 0);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_d3_sort(list_move);
//ds_list_d3_sort(list_solid);
//ds_list_copy(list_all, list_solid);
ds_list_d3_sum(list_solid, list_move, list_all);

if (keyboard_check_pressed(vk_f1))
{
    debug_on ^= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw floor
 for(var i = 0; i &lt; TMAPSIZE; i++){
    for (var j = 0; j &lt; TMAPSIZE; j++)
    {
        if( floor_grid[# i, j])
        {
            draw_sprite(floor_grid[# i, j].sprite_index, -1, round(d3_x + (i - j) * TCELLSIZETOX), round(d3_y + (i + j) * TCELLSIZETOZ / 2));
        }
    }
 }
 
///draw decor
for (var i = 0; i &lt; ds_list_size(list_tile); i++)
{
    var obj = list_tile[| i];
    if (obj.visible)
    {
        draw_sprite(obj.sprite_index, -1, 
        round(d3_x + (obj.gx - obj.gy) * TCELLSIZETOX),
        round(d3_y + (obj.gx + obj.gy) * TCELLSIZETOZ / 2));
    }
}

///draw shadows
draw_set_alpha(shadow_alpha);
draw_surface(shadow_surf, d3_x - TCELLSIZETOX * TMAPSIZE, d3_y);
draw_set_alpha(1);




///draw objects
for (var i = 0; i &lt; ds_list_size(list_all); i++)
{
    var obj = list_all[| i];
    //draw_text(800, (i + 1) * 25, object_get_name(obj.object_index));
    if (obj.visible)
    {
        if (surface_exists(obj.surf))
        {
            draw_surface(obj.surf, get_2d_x(obj), get_2d_y(obj));
        }
        draw_set_alpha(shadow_alpha);
        if (surface_exists(obj.area_surf))
        {
            draw_surface(obj.area_surf, round(-obj.shadow_xoffset + d3_x + (obj.gx - obj.gy) * TCELLSIZETOX 
            + (obj.length - obj.width) * TCELLSIZETOX),
            round(-obj.shadow_yoffset + d3_y + (obj.gx + obj.gy) * TCELLSIZETOZ / 2 
            - (obj.gz + obj.height) * TCELLHIGHT + (obj.width + obj.length - 2) * TCELLSIZETOZ / 2));
        } 
        draw_set_alpha(1);
    }
}
///draw debug
if (debug_on)
{
    draw_set_colour(c_red);
    for (var i = 0; i &lt; ds_list_size(list_all); i++)
    {
        draw_debug(list_all[| i]);
    }
}

 draw_text(100, 100, "fps: " + string(fps_real));
 draw_text(100, 125, "GG gy: " + string(obj_gg.gy));
 draw_text(200, 100, "d3_x: " + string(d3_x));
 //draw_text(100, 150, "ghost gz: " + string(obj_ghost.gz));
 //draw_text(100, 175, "difference: " + string(obj_weak.gy - obj_gg.gy));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
