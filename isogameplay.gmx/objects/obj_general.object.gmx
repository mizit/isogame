<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>list_solid = ds_list_create();    
list_move = ds_list_create();    
list_all = ds_list_create();

map_load("2000x2000");

gg = instance_create(0, 0, obj_gg);
gg.gx = 2;
gg.gy = 2;
gg.gz = 0;
ds_list_add(list_move, gg);

ANGO = 45;

d3_x = 500;
d3_y = 350;
d3_cell_size = TCELLSIZE;
d3_mult = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(list_solid);
ds_list_destroy(list_move);
ds_list_destroy(list_all);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_d3_sort(list_move);
ds_list_d3_sort(list_solid);
ds_list_d3_sum(list_solid, list_move, list_all);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw 3d substrate
 for(var i = 0; i &lt; TMAPSIZE; i++){
    for (var j = 0; j &lt; TMAPSIZE; j++)
    {
        draw_set_color(c_gray);
        draw_primitive_begin(pr_trianglefan);
        
        draw_vertex(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);
        
        draw_vertex(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        
        draw_vertex(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        
        draw_vertex(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);
        draw_primitive_end();
        draw_set_color(c_black);
        draw_line(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT,
        d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        draw_line(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT,
        d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        draw_line(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT,
        d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);
        draw_line(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT,
        d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);
    }
 }

for (var i = 0; i &lt; ds_list_size(list_all); i++)
{
    var obj = list_all[| i];
    /*if (surface_exists(obj.surf))
    {
        draw_surface_ext(obj.surf, round(-obj.sprite_xoffset * d3_mult + d3_x + 
        lengthdir_x(obj.gx * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * obj.gy, ANGO)),
        round(-obj.sprite_yoffset * d3_mult + d3_y + (lengthdir_y(obj.gy * d3_cell_size, -ANGO) + 
        lengthdir_x(d3_cell_size * obj.gx, ANGO)) * ASPECT - obj.gz * d3_mult * TCELLHIGHT),
        d3_mult,d3_mult, 0, c_white, 1);
    }*/
    draw_set_colour(c_red);
    
    var fbx, fby, ftx, fty;
    fbx = d3_x + lengthdir_x(obj.gx * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * obj.gy, ANGO) +
    (obj.length - obj.width) * TCELLSIZETOX;
    
    fby = d3_y + (lengthdir_y(obj.gy * d3_cell_size, -ANGO) + 
        lengthdir_x(d3_cell_size * obj.gx, ANGO)) * ASPECT - obj.gz * TCELLHIGHT +
        (obj.width + obj.length - 2) * TCELLSIZETOZ / 2;
        
    ftx = fbx;
    fty = fby - TCELLHIGHT * obj.height;
    
    var lbx, lby, ltx, lty;
    lbx = fbx - TCELLSIZETOX * obj.length;
    ltx = lbx;
    lby = fby - obj.length * TCELLSIZETOZ / 2;
    lty = lby - TCELLHIGHT * obj.height;
    
    var rbx, rby, rtx, rty;
    rbx = fbx + TCELLSIZETOX * obj.width;
    rtx = rbx;
    rby = fby - obj.width * TCELLSIZETOZ / 2;
    rty = rby - TCELLHIGHT * obj.height;
    
    var btx, bty;
    btx = ftx + (obj.width - obj.length) * TCELLSIZETOX;
    bty = fty - (obj.width + obj.length) * TCELLSIZETOZ / 2;
    
    draw_line(fbx, fby, ftx, fty);
    draw_line(lbx, lby, ltx, lty);
    draw_line(fbx, fby, lbx, lby);
    draw_line(ltx, lty, ftx, fty);
    draw_line(rbx, rby, rtx, rty);
    draw_line(fbx, fby, rbx, rby);
    draw_line(rtx, rty, ftx, fty);
    draw_line(ltx, lty, btx, bty);
    draw_line(rtx, rty, btx, bty);
}

 draw_text(100, 100, "fps: " + string(fps_real));
 draw_text(100, 140, "ASPECT: " + string(ASPECT));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
