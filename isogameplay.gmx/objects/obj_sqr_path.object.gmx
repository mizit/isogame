<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
path = ds_list_create();
gspeed = 0;
cycled = 0; //0 - direct, 1 - cycle, 2 - reverse
pusher = 0; //0 - return, 1 - try to push
goal = noone;
dx = 0;
dy = 0;
dz = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
for (var i = 0; i &lt; ds_list_size(path); i++)
{
    ds_list_destroy(path[| i]);
}
ds_list_destroy(path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (goal == noone)          //choosing goal at first time
{
    if (ds_list_size(path) &gt; 0)
    {
        goal = 0;
    }
    else
    {
        exit;           //if path doesn't exist doesn't work
    }
}

//when point was arrived
var p_goal = path[| goal];
if ((gx == p_goal[| COORD.X]) &amp;&amp; (gy == p_goal[| COORD.Y]) &amp;&amp; (gz == p_goal[| COORD.Z]))
{
    switch (cycled)
    {
    case 1:
    if (goal &lt; ds_list_size(path) - 1)
    {
        goal++;
    }
    else
    {
        goal = 0;
    }
    break;
    case 0:
    if (goal &lt; ds_list_size(path) - 1)
    {
        goal++;
    }
    else
    {
        cycled = -1;
        goal--;
    }
    break;
    case 2:
    if (goal &gt; 0)
    {
        goal--;
    }
    else
    {
        cycled = 0;
        goal++;
    }
    break;
    case 3:
    if (goal &gt; 0)
    {
        goal--;
    }
    else
    {
        goal = ds_list_size(path) - 1;
    }
    break;
    }
}


p_goal = path[| goal];
dx = sign(p_goal[| COORD.X] - gx) * (min(gspeed, abs(p_goal[| COORD.X] - gx)));
dy = sign(p_goal[| COORD.Y] - gy) * (min(gspeed, abs(p_goal[| COORD.Y] - gy)));
dz = sign(p_goal[| COORD.Z] - gz) * (min(gspeed, abs(p_goal[| COORD.Z] - gz)));


if (pusher)
{
    push_3d(id, dx, dy, dz);
}
else
{
    if (weak_move(id, dx, dy, dz) != (RET.X | RET.Y | RET.Z))
    {
        cycled ^= 2;
        if (cycled &amp; 2)
        {
            goal--;
            if (goal &lt; 0)
            {
                goal = ds_list_size(path) - 1;
            }
        }
        else
        {
            goal++;
            if (goal &gt; ds_list_size(path) - 1)
            {
                goal = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
/*
if (pusher)
{
    push_3d(id, dx, dy, dz);
}
else
{
    if (weak_move(id, dx, dy, dz) != (RET.X | RET.Y | RET.Z))
    {
        cycled ^= 2;
        if (cycled &amp; 2)
        {
            goal--;
            if (goal &lt; 0)
            {
                goal = ds_list_size(path) - 1;
            }
        }
        else
        {
            goal++;
            if (goal &gt; ds_list_size(path) - 1)
            {
                goal = 0;
            }
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
