<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>list_pos_obj = ds_list_create();    //list of possible objects

ds_list_add(list_pos_obj, obj_sqr_small, obj_sqr_tall, obj_sqr_wide_left, obj_sqr_wide_right);
ds_list_add(list_pos_obj, obj_sqr_small, obj_sqr_tall, obj_sqr_wide_left, obj_sqr_wide_right);
ds_list_add(list_pos_obj, obj_sqr_small, obj_sqr_tall, obj_sqr_wide_left, obj_sqr_wide_right);

for (var i = 0; i &lt; ds_list_size(list_pos_obj); i++)
{
    instance_create(-1000, -1000, list_pos_obj[| i]);
}

cursor_state = 0;
enum CURSOR_STATE{
    FREE = 0,
    STOCK = 1,
    NEW_LAYER = 2,
    LAYER = 3
}

stock_height = 128;
stock_width = 960;
stock_x = 32;
stock_y = 608;
stock_surf = surface_create(stock_width, stock_height);
stock_step = 15;
stock_xoff = 5;
stock_yoff = 5;
stock_sqr_size = 118;
stock_offset = 0;
stock_roll_step = 50;
stock_select = noone;

layers_list = ds_list_create();
ds_list_add(layers_list, layer_cell_create("layer" + string(ds_list_size(layers_list))));
layers_lb_x = 32;
layers_lb_y = 544;
layers_width = 100;
layers_height = 32;
layers_select = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(list_pos_obj);
surface_free(stock_surf);
for (var i = 0; i &lt; ds_list_size(layers_list); i++)
{
    ds_grid_destroy(ds_list_find_value(layers_list[| i], LAYER.GRID));
    ds_list_destroy(layers_list[| i]);
}
ds_list_destroy(layers_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursor_state = CURSOR_STATE.FREE;
if (point_in_rectangle(mouse_x, mouse_y, stock_x, stock_y, 
stock_x + stock_width, stock_y + stock_height))
{
    cursor_state = CURSOR_STATE.STOCK;
} 
if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, 
layers_lb_y - (1 + ds_list_size(layers_list)) * layers_height, 
layers_lb_x + layers_width, 
layers_lb_y - ds_list_size(layers_list) * layers_height))
{
    cursor_state = CURSOR_STATE.NEW_LAYER;
}
if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, 
layers_lb_y - ds_list_size(layers_list) * layers_height, 
layers_lb_x + layers_width, layers_lb_y))
{
    cursor_state = CURSOR_STATE.LAYER;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (cursor_state)
{
    case CURSOR_STATE.STOCK:
    {
        var st_len = (stock_sqr_size + stock_step) * ds_list_size(list_pos_obj) - stock_step + 2 * stock_xoff;
        if (mouse_wheel_down())
        {
            stock_offset = min(0, stock_offset + stock_roll_step);
        }
        if (mouse_wheel_up())
        {
            stock_offset = max(stock_width - st_len, stock_offset - stock_roll_step);
        }
        if (mouse_check_button(mb_left))
        {
            stock_select = floor ((mouse_x - stock_x - stock_offset - stock_xoff) / (stock_sqr_size + stock_step));
        }
        break;
    }
    case CURSOR_STATE.NEW_LAYER:
    {
        if (mouse_check_button(mb_left))
        {
            ds_list_add(layers_list, layer_cell_create("layer" + string(ds_list_size(layers_list))));
        }
        break;
    }
    case CURSOR_STATE.LAYER:
    {
        for (var i = 0; i &lt; ds_list_size(layers_list); i++)
        {
            if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, layers_lb_y - (i + 1) * layers_height, 
            layers_lb_x + layers_width, layers_lb_y - i * layers_height))
            {
                if (mouse_check_button_pressed(mb_left))
                {
                    layers_select = i;
                }
            }
        }
        break;
    }
}

surface_clear(stock_surf);
surface_set_target(stock_surf);
var d_pos = stock_xoff + stock_offset;
for (var i = 0; i &lt; ds_list_size(list_pos_obj); i++)
{
    var obj = list_pos_obj[| i];
    var mult = min(stock_sqr_size / obj.sprite_width, stock_sqr_size / obj.sprite_height);
    //draw_rectangle(d_pos, stock_yoff, d_pos + stock_sqr_size, stock_yoff + stock_sqr_size, 1);
    draw_sprite_ext(obj.sprite_index, -1, d_pos + obj.sprite_xoffset * mult + (stock_sqr_size - obj.sprite_width * mult) / 2, 
    stock_yoff + stock_sqr_size, mult, mult, 0, c_white, 1);
    if (stock_select == i)
    {
        draw_rectangle(d_pos, stock_yoff, d_pos + stock_sqr_size, stock_yoff + stock_sqr_size, 1);
    }
    d_pos += stock_sqr_size + stock_step;
}
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_green);
//draw_rectangle(stock_x, stock_y, stock_x + stock_width, stock_y + stock_height, 0);
if (surface_exists(stock_surf))
{
    draw_surface(stock_surf, stock_x, stock_y);
}
else
{
    stock_surf = surface_create(stock_width, stock_height);
}
draw_set_color(c_black);
draw_rectangle(stock_x, stock_y, stock_x + stock_width, stock_y + stock_height, 1);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
for (var i = 0; i &lt; ds_list_size(layers_list); i++)
{
    if (cursor_state == CURSOR_STATE.LAYER)
    {
        if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, layers_lb_y - (i + 1) * layers_height, 
        layers_lb_x + layers_width, layers_lb_y - i * layers_height))
        {
            draw_set_color(c_green);
            draw_rectangle(layers_lb_x, layers_lb_y - i * layers_height, 
        layers_lb_x + layers_width, layers_lb_y - (i + 1) * layers_height, 0);
        }
    }
    draw_set_color(c_black);
    var cell = layers_list[| i];
    draw_text(layers_lb_x + layers_width / 2, layers_lb_y - (i + 0.5) * layers_height, cell[| LAYER.NAME]);
    if (layers_select == i)
    {
        draw_rectangle(layers_lb_x, layers_lb_y - i * layers_height, 
        layers_lb_x + layers_width, layers_lb_y - (i + 1) * layers_height, 1);
    }
}
if (cursor_state == CURSOR_STATE.NEW_LAYER)
{
    draw_set_color(c_green);
    draw_rectangle(layers_lb_x, layers_lb_y - i * layers_height, 
        layers_lb_x + layers_width, layers_lb_y - (i + 1) * layers_height, 0);
}
draw_set_color(c_black);
draw_text(layers_lb_x + layers_width / 2, layers_lb_y - (i + 0.5) * layers_height, "+New layer");


draw_text(100, 100, cursor_state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
