<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>list_pos_obj = ds_list_create();    //list of possible objects
list_set_obj = ds_list_create();    //list of set objects
list_pos_tile = ds_list_create();
list_set_tile = ds_list_create();

ds_list_add(list_pos_obj, obj_sqr_small, obj_sqr_tall, obj_sqr_wide_left, obj_sqr_wide_right,
        obj_sqr_big_b, obj_sqr_big_g, obj_sqr_big_r, object10);
ds_list_add(list_pos_tile, obj_tile1, obj_tile2, obj_tile3);
        
for (var i = 0; i &lt; ds_list_size(list_pos_obj); i++)
{
    var tmp = instance_create(-1000, -1000, list_pos_obj[| i]);
    tmp.gx = noone;
    tmp.gy = noone;
    tmp.gz = noone;
}

for (var i = 0; i &lt; ds_list_size(list_pos_tile); i++)
{
    var tmp = instance_create(-1000, -1000, list_pos_tile[| i]);
    tmp.gx = noone;
    tmp.gy = noone;
    tmp.gz = noone;
}


cursor_state = 0;
enum CURSOR_STATE{
    FREE = 0,
    STOCK = 1,
    NEW_LAYER = 2,
    LAYER = 3,
    GRID = 4
}

stock_height = 128;
stock_width = 960;
stock_x = 32;
stock_y = 608;
stock_surf = surface_create(stock_width, stock_height);
stock_step = 15;
stock_xoff = 5;
stock_yoff = 5;
stock_sqr_size = 118;
stock_offset = 0;
stock_roll_step = 50;
stock_select = noone;

layers_list = ds_list_create();
ds_list_add(layers_list, layer_cell_create("tiles"));
ds_list_add(layers_list, layer_cell_create("layer" + string(ds_list_size(layers_list))));
layers_lb_x = 32;
layers_lb_y = 544;
layers_width = 100;
layers_height = 32;
layers_select = 0;

grid_x = 192;
grid_y = 128;
grid_size = 300;
grid_cell_size = grid_size / TMAPSIZE;

d3_x = 736;
d3_y = 352;
d3_size = 300;
d3_cell_size = grid_size / TMAPSIZE;
d3_mult = d3_cell_size / TCELLSIZE;
 
ANGO = 45;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(list_pos_obj);
surface_free(stock_surf);
for (var i = 0; i &lt; ds_list_size(layers_list); i++)
{
    ds_grid_destroy(ds_list_find_value(layers_list[| i], LAYER.GRID));
    ds_list_destroy(layers_list[| i]);
}
ds_list_destroy(layers_list);
ds_list_destroy(list_set_obj);
ds_list_destroy(list_pos_tile);
ds_list_destroy(list_set_tile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursor_state = CURSOR_STATE.FREE;
if (point_in_rectangle(mouse_x, mouse_y, stock_x, stock_y, 
stock_x + stock_width, stock_y + stock_height))
{
    cursor_state = CURSOR_STATE.STOCK;
} 
if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, 
layers_lb_y - (1 + ds_list_size(layers_list)) * layers_height, 
layers_lb_x + layers_width, 
layers_lb_y - ds_list_size(layers_list) * layers_height))
{
    cursor_state = CURSOR_STATE.NEW_LAYER;
}
if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, 
layers_lb_y - ds_list_size(layers_list) * layers_height, 
layers_lb_x + layers_width, layers_lb_y))
{
    cursor_state = CURSOR_STATE.LAYER;
}
if (point_in_rectangle(mouse_x, mouse_y, grid_x, grid_y, 
grid_x + grid_size, grid_y + grid_size))
{
    cursor_state = CURSOR_STATE.GRID;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (cursor_state)
{
    case CURSOR_STATE.STOCK:
    {
        var st_len = (stock_sqr_size + stock_step) * ds_list_size(list_pos_obj) - stock_step + 2 * stock_xoff;
        if (mouse_wheel_down()){
         stock_offset = min(0, stock_offset + stock_roll_step);
        }
        if (mouse_wheel_up())
        {
            stock_offset = max(stock_width - st_len, stock_offset - stock_roll_step);
        }
        if (mouse_check_button(mb_left))
        {
            stock_select = floor ((mouse_x - stock_x - stock_offset - stock_xoff) / (stock_sqr_size + stock_step));
        }
        break;
    }
    case CURSOR_STATE.NEW_LAYER:
    {
        if (mouse_check_button(mb_left))
        {
            ds_list_add(layers_list, layer_cell_create("layer" + string(ds_list_size(layers_list))));
        }
        break;
    }
    case CURSOR_STATE.LAYER:
    {
        for (var i = 0; i &lt; ds_list_size(layers_list); i++)
        {
            if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, layers_lb_y - (i + 1) * layers_height, 
            layers_lb_x + layers_width, layers_lb_y - i * layers_height))
            {
                if (mouse_check_button_pressed(mb_left))
                {
                    layers_select = i;
                }
            }
        }
        break;
    }
}

ds_list_d3_sort(list_set_obj);

surface_clear(stock_surf);
surface_set_target(stock_surf);
var d_pos = stock_xoff + stock_offset;
if (layers_select == 0)
{
    for (var i = 0; i &lt; ds_list_size(list_pos_tile); i++)
    {
        var obj = list_pos_tile[| i];
        var mult = min(stock_sqr_size / obj.sprite_width, stock_sqr_size / obj.sprite_height);

        draw_sprite_ext(obj.sprite_index, -1, d_pos + obj.sprite_xoffset * mult + (stock_sqr_size - obj.sprite_width * mult) / 2, 
        stock_yoff + obj.sprite_yoffset * mult + (stock_sqr_size - obj.sprite_height * mult) / 2, mult, mult, 0, c_white, 1);
        if (stock_select == i)
        {
            draw_rectangle(d_pos, stock_yoff, d_pos + stock_sqr_size, stock_yoff + stock_sqr_size, 1);
        }
        d_pos += stock_sqr_size + stock_step;
    }
}
else
{
    for (var i = 0; i &lt; ds_list_size(list_pos_obj); i++)
    {
        var obj = list_pos_obj[| i];
        var mult = min(stock_sqr_size / obj.sprite_width, stock_sqr_size / obj.sprite_height);
        //draw_rectangle(d_pos, stock_yoff, d_pos + stock_sqr_size, stock_yoff + stock_sqr_size, 1);
        draw_sprite_ext(obj.sprite_index, -1, d_pos + obj.sprite_xoffset * mult + (stock_sqr_size - obj.sprite_width * mult) / 2, 
        stock_yoff + obj.sprite_yoffset * mult + (stock_sqr_size - obj.sprite_height * mult) / 2, mult, mult, 0, c_white, 1);
        if (stock_select == i)
        {
            draw_rectangle(d_pos, stock_yoff, d_pos + stock_sqr_size, stock_yoff + stock_sqr_size, 1);
        }
        d_pos += stock_sqr_size + stock_step;
    }
}
surface_reset_target();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//drawing stock
draw_set_color(c_green);
if (surface_exists(stock_surf))
{
    draw_surface(stock_surf, stock_x, stock_y);
}
else
{
    stock_surf = surface_create(stock_width, stock_height);
}
draw_set_color(c_black);
draw_rectangle(stock_x, stock_y, stock_x + stock_width, stock_y + stock_height, 1);

//drawing layer selector and backlight
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

for(var i = 0; i &lt; ds_list_size(layers_list); i++)
{
    if (cursor_state == CURSOR_STATE.LAYER)
    {
        if (point_in_rectangle(mouse_x, mouse_y, layers_lb_x, layers_lb_y - (i + 1) * layers_height, 
        layers_lb_x + layers_width, layers_lb_y - i * layers_height))
        {
            draw_set_color(c_green);
            draw_rectangle(layers_lb_x, layers_lb_y - i * layers_height, 
            layers_lb_x + layers_width, layers_lb_y - (i + 1) * layers_height, 0);
        }
    }
    draw_set_color(c_black);
    var cell = layers_list[| i];
    draw_text(layers_lb_x + layers_width / 2, layers_lb_y - (i + 0.5) * layers_height, cell[| LAYER.NAME]);
    if (layers_select == i)
    {
        draw_rectangle(layers_lb_x, layers_lb_y - i * layers_height, 
        layers_lb_x + layers_width, layers_lb_y - (i + 1) * layers_height, 1);
    }
}

//drawing layers list
if (cursor_state == CURSOR_STATE.NEW_LAYER)
{
    draw_set_color(c_green);
    draw_rectangle(layers_lb_x, layers_lb_y - i * layers_height, 
        layers_lb_x + layers_width, layers_lb_y - (i + 1) * layers_height, 0);
}
draw_set_color(c_black);
draw_text(layers_lb_x + layers_width / 2, layers_lb_y - (i + 0.5) * layers_height, "+New layer");

//drawing 2d objects
 for(var i = 0; i &lt; TMAPSIZE; i++){
    for (var j = 0; j &lt; TMAPSIZE; j++)
    {
        var cell = ds_grid_get(ds_list_find_value(layers_list[| layers_select], LAYER.GRID), i, j);
        if (cell != noone)
        {
            draw_set_color(cell.color);
        }
        else
        {
            draw_set_color(c_gray);
        }
        draw_rectangle(grid_x + i * grid_cell_size, grid_y + j * grid_cell_size, grid_x + (i + 1) * grid_cell_size, grid_y + (j + 1) * grid_cell_size, 0);
        draw_set_color(c_black);
        draw_rectangle(grid_x + i * grid_cell_size, grid_y + j * grid_cell_size, grid_x + (i + 1) * grid_cell_size, grid_y + (j + 1) * grid_cell_size, 1);
    }
 }

//draw_rectangle(grid_x, grid_y, grid_x + grid_size, grid_y + grid_size, 0);

 if(cursor_state == CURSOR_STATE.GRID){
    var l_gx, l_gy;
    l_gx = floor((mouse_x - grid_x) / grid_cell_size);
    l_gy = floor((mouse_y - grid_y) / grid_cell_size);
    l_gz = layers_select;
    if (stock_select != noone)
    {
        ///Drawing potential objects
        var test = 1;
        if (layers_select == 0)
        {
            if (!grid_is_cell_free(l_gx, l_gy, 0))
            {
                test = 0;
            }
        }
        else
        {
            for (var i = 0; i &lt; list_pos_obj[| stock_select].length; i++)
            {  
                for (var j = 0; j &lt; list_pos_obj[| stock_select].width; j++)
                {
                    for (var k = 0; k &lt; list_pos_obj[| stock_select].height; k++)
                    {
                        if (!grid_is_cell_free(l_gx + i, l_gy + j, l_gz + k))
                        {
                            test = 0;
                        }
                    }
                }
            }
        }
        if (test)
        {
            if (layers_select != 0)
            {
                draw_set_alpha(0.5);
                draw_set_color(list_pos_obj[| stock_select].color);
                draw_rectangle(grid_x + l_gx * grid_cell_size, grid_y + l_gy * grid_cell_size,
                grid_x + (l_gx + list_pos_obj[| stock_select].length) * grid_cell_size, 
                grid_y + (l_gy + list_pos_obj[| stock_select].width) * grid_cell_size, 0);
                draw_set_alpha(1);
            }
            ///Setting objects
            if (layers_select == 0)
            {
                if (mouse_check_button(mb_left))
                {
                    var tmp = instance_create(-1000, -1000, list_pos_tile[| stock_select].object_index);
                    tmp.gx = l_gx;
                    tmp.gy = l_gy;
                    tmp.gz = 0;
                    var l_layer = layers_list[| 0];
                    var l_grid = l_layer[| LAYER.GRID];
                    l_grid[# l_gx, l_gy] = tmp;
                    ds_list_add(list_set_tile, tmp);
                   // ds_list_d3_sort(list_set_tile);
                }
            }
            else
            {
                if (mouse_check_button_pressed(mb_left))
                {
                    var tmp = instance_create(-1000, -1000, list_pos_obj[| stock_select].object_index);
                    tmp.gx = l_gx;
                    tmp.gy = l_gy;
                    tmp.gz = l_gz;
                    for (var i = 0; i &lt; list_pos_obj[| stock_select].length; i++)
                    {  
                        for (var j = 0; j &lt; list_pos_obj[| stock_select].width; j++)
                        {
                            for (var k = 0; k &lt; list_pos_obj[| stock_select].height; k++)
                            {
                               var l_layer = layers_list[| l_gz + k];
                               var l_grid = l_layer[| LAYER.GRID];
                               l_grid[# l_gx + i, l_gy + j] = tmp;
                            }
                        }
                    }
                    ds_list_add(list_set_obj, tmp);
                    ds_list_d3_sort(list_set_obj);
                }
            }
        }
    }
    ///deleting objects
    if (layers_select == 0)
    {
        if (mouse_check_button(mb_right))
        {
            var tmp = grid_cell(l_gx, l_gy, l_gz);
            if (tmp != noone)
            {
                var l_layer = layers_list[| 0];
                var l_grid = l_layer[| LAYER.GRID];
                l_grid[# tmp.gx, tmp.gy] = noone;
                ds_list_delete_value(list_set_obj, tmp);
                instance_destroy(tmp);
            }
        }
    }
    else
    {
        if (mouse_check_button(mb_right))
        {
            var tmp = grid_cell(l_gx, l_gy, l_gz);
            if (tmp != noone)
            {
                for (var i = 0; i &lt; tmp.length; i++)
                {  
                    for (var j = 0; j &lt; tmp.width; j++)
                    {
                        for (var k = 0; k &lt; tmp.height; k++)
                        {
                            var l_layer = layers_list[| tmp.gz + k];
                            var l_grid = l_layer[| LAYER.GRID];
                            l_grid[# tmp.gx + i, tmp.gy + j] = noone;
                        }
                    }
                }
                ds_list_delete_value(list_set_obj, tmp);
                instance_destroy(tmp);
                ds_list_d3_sort(list_set_obj);
            }
        }
    }
 }

///draw 3d substrate
 for(var i = 0; i &lt; TMAPSIZE; i++){
    for (var j = 0; j &lt; TMAPSIZE; j++)
    {
        var l_layer = layers_list[| 0];
        var l_grid = l_layer[| LAYER.GRID];
        if (l_grid[# i, j] != noone)
        {
            var l_tile = l_grid[# i, j];
            draw_sprite_ext(l_tile.sprite_index, -1, d3_x + 
            lengthdir_x(l_tile.gx * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * l_tile.gy, ANGO),
            d3_y + (lengthdir_y(l_tile.gy * d3_cell_size, -ANGO) + 
            lengthdir_x(d3_cell_size * l_tile.gx, ANGO)) * ASPECT - l_tile.gz * d3_mult * TCELLHIGHT,
            d3_mult, d3_mult, 0, c_white, 1);
        }
        /*draw_set_color(c_gray);
        draw_primitive_begin(pr_trianglefan);
        
        draw_vertex(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);
        
        draw_vertex(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        
        draw_vertex(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        
        draw_vertex(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);
        draw_primitive_end();
        draw_set_color(c_black);
        draw_line(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT,
        d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        draw_line(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT,
        d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT);
        draw_line(d3_x + lengthdir_x((i - 1) * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * (i - 1), ANGO)) * ASPECT,
        d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);
        draw_line(d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * (j - 1), ANGO),
        d3_y + (lengthdir_y((j - 1) * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT,
        d3_x + lengthdir_x(i * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * j, ANGO),
        d3_y + (lengthdir_y(j * d3_cell_size, -ANGO) + lengthdir_x(d3_cell_size * i, ANGO)) * ASPECT);*/
    }
 }

/*for (var i = 0; i &lt; ds_list_size(list_set_tile); i++)
{
    var obj = list_set_tile[| i];
    draw_sprite_ext(obj.sprite_index, -1, d3_x + 
    lengthdir_x(obj.gx * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * obj.gy, ANGO),
    d3_y + (lengthdir_y(obj.gy * d3_cell_size, -ANGO) + 
    lengthdir_x(d3_cell_size * obj.gx, ANGO)) * ASPECT - obj.gz * d3_mult * TCELLHIGHT,
    d3_mult, d3_mult, 0, c_white, 1);
}*/
 
for (var i = 0; i &lt; ds_list_size(list_set_obj); i++)
{
    var obj = list_set_obj[| i];
    if (surface_exists(obj.surf))
    {
        draw_surface_ext(obj.surf, -obj.sprite_xoffset * d3_mult + d3_x + 
        lengthdir_x(obj.gx * d3_cell_size, -ANGO) + lengthdir_y(d3_cell_size * obj.gy, ANGO),
        -obj.sprite_yoffset * d3_mult + d3_y + (lengthdir_y(obj.gy * d3_cell_size, -ANGO) + 
        lengthdir_x(d3_cell_size * obj.gx, ANGO)) * ASPECT - (obj.gz - 1) * d3_mult * TCELLHIGHT,
        d3_mult, d3_mult, 0, c_white, 1);
    }
}

 draw_text(100, 100, "fps: " + string(fps_real));
 draw_text(100, 140, "ASPECT: " + string(ASPECT));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SAVE
 tsave("test");
 //game_end();
 //exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 ANGO += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 ANGO -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LOAD
 tload("test");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 ASPECT += 0.01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 ASPECT -= 0.01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tsave(string(room_x) + "x" + string(room_y));
room_goto(r_strategy_creator);
// game_end();
// exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
